

#### take all genes that change between Day 0 and Day 4, plus genes that change when remove REST
#### find raw expression values for these genes and cluster based on expression profile
#### plot mediod of each cluster both with and without REST - might have to focus just on genes that change in KO

options(stringsAsFactors = FALSE)

library(limma)
library(beadarray)
library(hopach)
library(Mfuzz)
library(ggplot2)
library(bioDist)

##############raw data
changed.REST <- read.csv(file = "results/genes_changing_withwithout_REST_sig.csv")
changed.TIME <- read.csv(file = "results/genes_changing_across_timecourse_sig.csv")

##find genes in both


###need to remove duplicates based on greatest expression change or something....

REST.ids <- changed.REST[,"EnsemblID"]
TIME.ids <- changed.TIME[,"EnsemblID"]

both.ids <- intersect(REST.ids,TIME.ids)

###stick dataframes together and pull out probes that are in both

changed.all <- rbind(changed.REST,changed.TIME)

changed.both <- changed.all[which(changed.all[,"EnsemblID"] %in% both.ids),]

###remove duplicates

changed.both_o <- changed.both[order(abs(changed.both[,"logFC"]),decreasing = TRUE),]
changed.both_od <- changed.both_o[!duplicated(changed.both_o[,"EnsemblID"]),]

###tidy up and take genes significantly changing

changed_genes <- changed.both_od[,c("ID","EnsemblID","logFC")]
changed_genes <- changed_genes[which(abs(changed_genes[,"logFC"]) >= 1),]

################expression data
#reload all data and keep mutant aswell...
BSData <- get(load("results/BSData.quantile.RData"))
E <- exprs(BSData)
E <- E[,c(1:4,24:27,28:31,5:8,9:11,16:19,20:23,12:15)]

BSData.std <- standardise(BSData)
E.std <- exprs(BSData.std)
E.std <- E.std[,c(1:4,24:27,28:31,5:8,9:11,16:19,20:23,12:15)]

changeE <- merge(E, changed_genes, by.x = "row.names", by.y = "ID")

####dont filter on E expression level - doesnt work
#changeE <- changeE.fil

#remove one gene that doesnt have annotation
changeE <- changeE[which(!(is.na(changeE[,"EnsemblID"]))),]

#put rownames as ensemblIDs, makes downstream stuff easier
rownames(changeE) <- changeE[,"EnsemblID"]

Exp <- changeE[,2:32]

##calculate averages

D4.0 <- c(1,2,3,4)
D4.1 <- c(5,6,7,8)
D4.2 <- c(9,10,11,12)
D4.4 <- c(13,14,15,16)
C18.0 <- c(17,18,19)
C18.1 <- c(20,21,22,23)
C18.2 <- c(24,25,26,27)
C18.4 <- c(28,29,30,31)

aves <- apply(Exp, 1, function(x){
        D4.0av <- sum(x[D4.0])/length(D4.0)
        D4.1av <- sum(x[D4.1])/length(D4.1)
        D4.2av <- sum(x[D4.2])/length(D4.2)
        D4.4av <- sum(x[D4.4])/length(D4.4)
        C18.0av <- sum(x[C18.0])/length(C18.0)
        C18.1av <- sum(x[C18.1])/length(C18.1)
        C18.2av <- sum(x[C18.2])/length(C18.2)
        C18.4av <- sum(x[C18.4])/length(C18.4) 
            return(c(D4.0av,D4.1av,D4.2av,D4.4av,C18.0av,C18.1av,C18.2av,C18.4av))
        }
)        

aves <- t(aves)

colnames(aves) <- c("D4_0","D4_1","D4_2","D4_4","C18_0","C18_1","C18_2","C18_4")

aves_D4 <- aves[,1:4]
aves_C18 <- aves[,5:8]


###################HOPACH
###just use for D4 WT - although think there's only 6 clusters

#compute the distance matrix first - try cosangle or euclid
gene.dist_D4 <- distancematrix(aves_D4, "euclid")
gene.dist_C18 <- distancematrix(aves_C18, "euclid")

#now run hopach. K score relates to the level pf the dendrogram at which to call the clusters
gene.hopach_D4 <- hopach(aves_D4, dmat=gene.dist_D4, d="euclid",K=1)
gene.hopach_C18 <- hopach(aves_C18, dmat=gene.dist_C18, d="euclid",K=1)

#plot distance matrix
postscript(file="results/distancematrix_D4.ps", horizontal=FALSE)
dplot(gene.dist_D4, 
	gene.hopach_D4, 
	ord = "cluster", 
	main = "ESC D4 Timecourse", 
	showclusters = TRUE)
dev.off()

D4_clusters <- gene.hopach_D4$clust$k
C18_clusters <- gene.hopach_C18$clust$k

##########################MFuzz

tmp_expr_D4 = new('ExpressionSet', exprs=aves_D4)

##try standardisation?!

tmp_expr_D4 <- standardise(tmp_expr_D4)
cl_D4 = mfuzz(tmp_expr_D4, c=6,m=1.25)

#tmp_expr_C18 = new('ExpressionSet', exprs=aves_C18)
#cl_C18 = mfuzz(tmp_expr_C18, c=C18_clusters,m=2)

#MFuzz plotting function
matt.plot<-function (eset, cl, mfrow = c(1, 1), colo, min.mem = 0, time.labels, new.window = TRUE, ymin=-999, ymax=-999, xlab="Time", ylab="Expression Changes")
{
    clusterindex <- cl[[3]]
    memship <- cl[[4]]
    memship[memship < min.mem] <- -1
    colorindex <- integer(dim(exprs(eset))[[1]])
    if (missing(colo)) {
        colo <- c("#FF8F00", "#FFA700", "#FFBF00", "#FFD700",
            "#FFEF00", "#F7FF00", "#DFFF00", "#C7FF00", "#AFFF00",
            "#97FF00", "#80FF00", "#68FF00", "#50FF00", "#38FF00",
            "#20FF00", "#08FF00", "#00FF10", "#00FF28", "#00FF40",
            "#00FF58", "#00FF70", "#00FF87", "#00FF9F", "#00FFB7",
            "#00FFCF", "#00FFE7", "#00FFFF", "#00E7FF", "#00CFFF",
            "#00B7FF", "#009FFF", "#0087FF", "#0070FF", "#0058FF",
            "#0040FF", "#0028FF", "#0010FF", "#0800FF", "#2000FF",
            "#3800FF", "#5000FF", "#6800FF", "#8000FF", "#9700FF",
            "#AF00FF", "#C700FF", "#DF00FF", "#F700FF", "#FF00EF",
            "#FF00D7", "#FF00BF", "#FF00A7", "#FF008F", "#FF0078",
            "#FF0060", "#FF0048", "#FF0030", "#FF0018")
    }
    colorseq <- seq(0, 1, length = length(colo))
    for (j in 1:max(clusterindex)) {
        tmp <- exprs(eset)[clusterindex == j, ]
        tmpmem <- memship[clusterindex == j, j]
        if (((j - 1)%%(mfrow[1] * mfrow[2])) == 0) {
            if (new.window)
                X11()
            par(mfrow = mfrow)
 
            if (sum(clusterindex == j) == 0) {
                if(ymin == -999){ymin <- -1}
                if(ymax == -999) {ymax <- +1}
            }
            else {
                if(ymin == -999) {ymin <- min(tmp)}
                if(ymax == -999) {ymax <- max(tmp)}
            }
            plot.default(x = NA, xlim = c(1, dim(exprs(eset))[[2]]),
                ylim = c(ymin, ymax), xlab = xlab, ylab = ylab,
                main = paste("Cluster", j), axes = FALSE)
            if (missing(time.labels)) {
                axis(1, 1:dim(exprs(eset))[[2]], c(1:dim(exprs(eset))[[2]]))
                axis(2)
            }
           else {
                axis(1, 1:dim(exprs(eset))[[2]], time.labels)
                axis(2)
            }
        }
        else {
            if (sum(clusterindex == j) == 0) {
                if(ymin == -999){ymin <- -1}
                if(ymax == -999) {ymax <- +1}
            }
            else {
                if(ymin == -999) {ymin <- min(tmp)}
                if(ymax == -999) {ymax <- max(tmp)}
            }
            plot.default(x = NA, xlim = c(1, dim(exprs(eset))[[2]]),
                ylim = c(ymin, ymax), xlab = xlab, ylab = ylab,
                main = paste("Cluster", j), axes = FALSE)
            if (missing(time.labels)) {
                axis(1, 1:dim(exprs(eset))[[2]], c(1:dim(exprs(eset))[[2]]))
                axis(2)
            }
            else {
                axis(1, 1:dim(exprs(eset))[[2]], time.labels)
                axis(2)
            }
        }
        if (!(sum(clusterindex == j) == 0)) {
            for (jj in 1:(length(colorseq) - 1)) {
                tmpcol <- (tmpmem >= colorseq[jj] & tmpmem <=
                  colorseq[jj + 1])
                if (sum(tmpcol) > 0) {
                  tmpind <- which(tmpcol)
                  for (k in 1:length(tmpind)) {
                    lines(tmp[tmpind[k], ], col = colo[jj])
                  }
                }
            }
        }
    }
}

#plot with Mfuzz

#names <- c("D4_0","D4_1","D4_2","D4_4")

postscript(file="results/wt_clustering.ps", 
		paper="special",
		width=14,
		height=9, 
		horizontal=FALSE)
		par(las=2)
	matt.plot(tmp_expr_D4,cl=cl_D4,
	   mfrow=c(2,5),
	   new.window = FALSE,
	   time.labels= c("0","1","2","4"),
	   min.mem=0.3,
          ymin = -3,
         ymax = 3,
           xlab = ""
                )
dev.off()

#annotate clusters with raw expression value averages and draw mean expression profile - as input to DTW

#find eigengene/mediod of each cluster
centers <- cl_D4$centers


core_D4 <- acore(tmp_expr_D4, cl_D4, min.acore=0.1)

core_data <- sapply(core_D4,function(x){
   #find rows from aves that are in each cluster 
   core_exp <- aves[rownames(x),]

   #take average of all genes in each cluster across time points
   colMeans(core_exp)
})

#core_data <- as.data.frame(t(core_data))

core_wt <- core_data[1:4,]
core_mt <- core_data[5:8,]

rownames(core_wt) <- c("1","2","3","4")
rownames(core_mt) <- c("1","2","3","4")

core_wt <- melt(core_wt)
core_mt <- melt(core_mt)

colnames(core_wt) <- c("Time","Cluster","Value")
colnames(core_mt) <- c("Time","Cluster","Value")

ggplot(core_wt, aes(Time,Value)) + geom_line() + facet_grid(Cluster ~ .) 

postscript(file = "results/clusters_of_genes_that_change_with_RESTKO.ps", horizontal = FALSE)
ggplot(core_wt, aes(Time,Value)) + geom_line() + facet_grid(Cluster ~ .) + geom_line(aes(x=core_mt$Time, y=core_mt$Value), colour = "red")
dev.off()

#####very well correlated in clusters - add in all other genes and then take ones that also are tightly correlated
##re-average standardised E 

BSData.std <- standardise(BSData)
E.std <- exprs(BSData.std)
E.std <- E.std[,c(1:4,24:27,28:31,5:8)]

aves.std <- apply(E.std, 1, function(x){
        D4.0av <- sum(x[D4.0])/length(D4.0)
        D4.1av <- sum(x[D4.1])/length(D4.1)
        D4.2av <- sum(x[D4.2])/length(D4.2)
        D4.4av <- sum(x[D4.4])/length(D4.4)
            return(c(D4.0av,D4.1av,D4.2av,D4.4av))
        }
)        

aves.std <- t(aves.std)

colnames(aves.std) <- c("D4_0","D4_1","D4_2","D4_4")

res <- list()

for(i in 1:nrow(centers)){
   cent.d <- function(x){euc(rbind(centers[i,],x))}
   res[[i]] <- apply(aves.std, 1, cent.d)
}
center.dists<-do.call(cbind, res)

#extract the closest cluster to which each gene fits into (closest) and the distance from the gene to that eigengene/mediod (closest.dist)
closest<-apply(center.dists, 1,which.min)
closest.dist<-apply(center.dists, 1, min)
closest.genes <- data.frame(closest,closest.dist)

##annotate back to f_test with REST KO expression data

f_test <- read.csv(file = "results/f_test.csv")

f_test <- f_test[which(!(is.na(f_test[,"EnsemblID"]))),]

rownames(f_test) <- f_test[,"ID"]
f_test <- f_test[,c("EnsemblID", "symbol","day0","day1","day2","day4","adj.P.Val")]

f_closest <- merge(f_test,closest.genes,by.x = "row.names", by.y = "row.names")

f_closest_sig <- f_closest[which(f_closest[,"adj.P.Val"] <= 0.01),]

f_closest_o <- f_closest_sig[order(f_closest_sig[,"closest.dist"],decreasing = FALSE),]
f_closest_od <- f_closest_o[!duplicated(f_closest_o[,"EnsemblID"]),]

##take only genes that are closer than something...
f_closest <- f_closest_od[which(f_closest_od[,"closest.dist"] <= 0.5),]
f_closest <- f_closest[order(f_closest[,"closest"],f_closest[,"closest.dist"],decreasing = FALSE),]

colnames(f_closest)[1] <- "ID"

#remake nonstandardised ave with probe ids

E <- exprs(BSData)
E <- E[,c(1:4,24:27,28:31,5:8,9:11,16:19,20:23,12:15)]

aves.probe <- apply(E, 1, function(x){
        D4.0av <- sum(x[D4.0])/length(D4.0)
        D4.1av <- sum(x[D4.1])/length(D4.1)
        D4.2av <- sum(x[D4.2])/length(D4.2)
        D4.4av <- sum(x[D4.4])/length(D4.4)
        C18.0av <- sum(x[C18.0])/length(C18.0)
        C18.1av <- sum(x[C18.1])/length(C18.1)
        C18.2av <- sum(x[C18.2])/length(C18.2)
        C18.4av <- sum(x[C18.4])/length(C18.4) 
            return(c(D4.0av,D4.1av,D4.2av,D4.4av,C18.0av,C18.1av,C18.2av,C18.4av))
        }
)        

aves.probe <- t(aves.probe)

colnames(aves.probe) <- c("D4_0","D4_1","D4_2","D4_4","C18_0","C18_1","C18_2","C18_4")

### need a dataframe of ensembl id, cluster id and distance, merged by probe id

cluster_exp <- merge(f_closest,aves.probe, by.x = "ID", by.y = "row.names")

## split it out by cluster and average exp at each age for plot

cluster_exp1 <- cluster_exp[which(cluster_exp[,"closest"] == 1),]
cluster_exp2 <- cluster_exp[which(cluster_exp[,"closest"] == 2),]
cluster_exp3 <- cluster_exp[which(cluster_exp[,"closest"] == 3),]
cluster_exp4 <- cluster_exp[which(cluster_exp[,"closest"] == 4),]
cluster_exp5 <- cluster_exp[which(cluster_exp[,"closest"] == 5),]
cluster_exp6 <- cluster_exp[which(cluster_exp[,"closest"] == 6),]

## pull out exp and give EnsemblID as rownames

c_exp_1 <- cluster_exp1[,11:18]
rownames(c_exp_1) <- cluster_exp1[,"EnsemblID"]
c_exp_2 <- cluster_exp2[,11:18]
rownames(c_exp_2) <- cluster_exp2[,"EnsemblID"]
c_exp_3 <- cluster_exp3[,11:18]
rownames(c_exp_3) <- cluster_exp3[,"EnsemblID"]
c_exp_4 <- cluster_exp4[,11:18]
rownames(c_exp_4) <- cluster_exp4[,"EnsemblID"]
c_exp_5 <- cluster_exp5[,11:18]
rownames(c_exp_5) <- cluster_exp5[,"EnsemblID"]
c_exp_6 <- cluster_exp6[,11:18]
rownames(c_exp_6) <- cluster_exp6[,"EnsemblID"]

## average each cluster

res.mx <- matrix(nrow = 6, ncol = 8)
rownames(res.mx) <- seq(1,6,1)
colnames(res.mx) <- c("D4_0","D4_1","D4_2","D4_4","C18_0","C18_1","C18_2","C18_4")

res.mx[1,] <- colMeans(c_exp_1)
res.mx[2,] <- colMeans(c_exp_2)
res.mx[3,] <- colMeans(c_exp_3)
res.mx[4,] <- colMeans(c_exp_4)
res.mx[5,] <- colMeans(c_exp_5)
res.mx[6,] <- colMeans(c_exp_6)

##melt out and plot

res.mx <- as.data.frame(t(res.mx))

res_wt <- res.mx[1:4,]
res_mt <- res.mx[5:8,]

rownames(res_wt) <- c("1","2","3","4")
rownames(res_mt) <- c("1","2","3","4")

res_wt <- melt(res_wt)
res_mt <- melt(res_mt)

colnames(res_wt) <- c("Time","Cluster","Value")
colnames(res_mt) <- c("Time","Cluster","Value")

postscript(file = "results/clusters_of_genes_that_change_with_RESTKO.ps", horizontal = FALSE)
ggplot(res_wt, aes(Time,Value)) + geom_line() + facet_grid(Cluster ~ .) + geom_line(aes(x=core_mt$Time, y=core_mt$Value), colour = "red")
dev.off()







############for some reason this doesnt really work. Going to give up for now, otherwise never going to get this done.














##try k-means instead
k_test <- kmeans2(tmp_expr_D4, k = 5)
kmeans2.plot(tmp_expr_D4, kl = k_test, mfrow=c(2,4))

##do properly...

#determine number of clusters
wss <- (nrow(tmp_expr_D4)-1)*sum(apply(tmp_expr_D4,2,var))
 for (i in 2:15) wss[i] <- sum(kmeans(tmp_expr_D4, 
   centers=i)$withinss)
 plot(1:15, wss, type="b", xlab="Number of Clusters",
   ylab="Within groups sum of squares") 

# K-Means Cluster Analysis
fit <- kmeans(tmp_expr_D4, 6) 

# get cluster means 
aggregate(tmp_expr_D4,by=list(fit$cluster),FUN=mean)

# append cluster assignment
mydata <- data.frame(tmp_expr_D4, fit$cluster)


plot(seq(1,4,1), core_data[1,])

apply(core_data,1,function(x){
			par(mfrow=c(2,3))
			plot(seq(1,4,1),x)
			}
			)



#########################################################################################

##DTW

library(dtw)

##perform DTW on core_data

cl1 <- dtw(core_data[1:4,1],core_data[5:8,1], keep = TRUE, step = rabinerJuangStepPattern(6,"c"))
cl2 <- dtw(core_data[1:4,2],core_data[5:8,2], keep = TRUE, step = rabinerJuangStepPattern(6,"c"))
cl3 <- dtw(core_data[1:4,3],core_data[5:8,3], keep = TRUE, step = rabinerJuangStepPattern(6,"c"))
cl4 <- dtw(core_data[1:4,4],core_data[5:8,4], keep = TRUE, step = rabinerJuangStepPattern(6,"c"))
cl5 <- dtw(core_data[1:4,5],core_data[5:8,5], keep = TRUE, step = rabinerJuangStepPattern(6,"c"))
cl6 <- dtw(core_data[1:4,6],core_data[5:8,6], keep = TRUE, step = rabinerJuangStepPattern(6,"c"))

par(mfrow=c(3,2))
plot(cl1, type = "twoway",offset = -2)
plot(cl2, type = "twoway",offset = -2)
plot(cl3, type = "twoway",offset = -2)
plot(cl4, type = "twoway",offset = -2)
plot(cl5, type = "twoway",offset = -2)
plot(cl6, type = "twoway",offset = -2)

> cl1$distance
[1] 2.593101
> cl2$distance
[1] 1.29822
> cl3$distance
[1] 4.154293
> cl4$distance
[1] 3.474713
> cl5$distance
[1] 3.528792
> cl6$distance
[1] 2.776019
>

###########now take genes that are in each cluster and find average loss of K9ac for across each cluster...

save(core_D4, file = "results/core_D4.RData")

core_D4 <- get(load("results/core_D4.RData"))

k9ac <- read.csv(file = "/space/matt/EscChIPseqAcRE/results/H3K9ac_changes_DeSeq.csv")

##too big

k9ac <- k9ac[,c(3,10,13,18,21,26,27,28)]

core_peak <- list()

for(i in 1:length(core_D4)){
		core_peak[[i]] <- merge(core_D4[[i]],k9ac, by.x = "NAME", by.y = "EnsemblID")
		}

##take average DeSeq (log) score for each cluster

deseq_avg <- matrix(nrow = 6, ncol = 3)

for(i in 1:length(core_peak)){
		deseq_avg[i,1] <- i
		deseq_avg[i,2] <- mean(core_peak[[i]][,"logFC_DeSeq"])
		}













