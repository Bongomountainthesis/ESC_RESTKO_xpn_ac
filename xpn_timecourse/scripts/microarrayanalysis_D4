options(stringsAsFactors=FALSE)

qw <- function(...) {
  as.character(sys.call()[-1])
}

library(beadarray)
library(limma)
library(biomaRt)
library(illuminaMousev2BeadID.db)
library(illuminaMousev2.db)
library(gplots)
library(Mfuzz)
library(hopach)


		#load the data
BSData <- get(load("results/BSData.quantile.RData"))
E <- exprs(BSData)

E <- E[,c(1:4,24:27,28:31,5:8,9:11,16:19,20:23,12:15)]

#just take D4

E <- E[,1:16]

design<-matrix(0,nrow=(ncol(E)), ncol=4)
colnames(design) <- c("D4_0","D4_1","D4_2","D4_4")
rownames(design) <- colnames(E)
design[1:4,1] <- 1
design[5:8,2] <- 1
design[9:12,3] <- 1
design[13:16,4] <- 1

cont.matrix<-makeContrasts(day0vs1=D4_1-D4_0,
			   day1vs2=D4_2-D4_1,
                           day2vs4=D4_4-D4_2,
                           day0vs4=D4_4-D4_0,
                           levels=design)


fit<-lmFit(E, design)
fit<-contrasts.fit(fit, cont.matrix)
ebFit<-eBayes(fit)

ids = rownames(E)
symbol <- mget(ids, illuminaMousev2BeadIDSYMBOL, ifnotfound = NA)
sum(sapply(symbol, length) > 1)
symbol <- as.character(symbol)
length(which(symbol=="NA"))

ensembl = mget(ids, illuminaMousev2BeadIDENSEMBL, ifnotfound = NA)
length(which(is.na(ensembl)))

sum(sapply(ensembl, length) > 1)
crosshyb <- which(( sapply(ensembl, length) ) > 1) 
length(crosshyb)
ensembl[crosshyb] <- NA 
ensembl <- as.character(ensembl)
ensembl[ensembl=="NA"] = NA
length(which(is.na(ensembl)))

ensmart <- useMart("ensembl", dataset="mmusculus_gene_ensembl")


filters <- "ensembl_gene_id"
values <- ensembl[!is.na(ensembl)]
attributes <- c("ensembl_gene_id", "chromosome_name","start_position", "end_position", "strand", "description")
ens.anno <- getBM(filters=filters, values=values, attributes=attributes, mart=ensmart)
rownames(ens.anno)<-ens.anno[,1]

anno <- data.frame(
                   ID = as.character(ids),
                   EnsemblID = ensembl,
                   symbol=symbol,
                   ens.anno[ensembl,],
                   stringsAsFactors=F
              )
rownames(anno) <- anno[,"ID"]

ebFit$genes = anno 

f.test<- topTable(ebFit, number=nrow(E))
rownames(f.test)<-f.test$ID
#f.test<-f.test[which(f.test[,"adj.P.Val"]<=0.005),]
f.test<-f.test[order(f.test[,"F"],decreasing=TRUE),]
write.csv(f.test,"results/f_test_D4.csv",row.names=F)

day0vs1<-topTable(ebFit, coef=1, adjust="BH", number=nrow(E))
rownames(day0vs1)<-day0vs1$ID
#day0vs1<-day0vs1[which(day0vs1[,"adj.P.Val"]<=0.005),]
day0vs1<-day0vs1[order(day0vs1[,"logFC"],decreasing=TRUE),]
write.csv(day0vs1,"results/day0vs1_D4.csv",row.names=F)

day1vs2<-topTable(ebFit, coef=2, adjust="BH", number=nrow(E))
rownames(day1vs2)<-day1vs2$ID
#day1vs2<-day1vs2[which(day1vs2[,"adj.P.Val"]<=0.005),]
day1vs2<-day1vs2[order(day1vs2[,"logFC"],decreasing=TRUE),]
write.csv(day1vs2,"results/day1vs2_D4.csv",row.names=F)

day2vs4<-topTable(ebFit, coef=3, adjust="BH", number=nrow(E))
rownames(day2vs4)<-day2vs4$ID
#day2vs4<-day2vs4[which(day2vs4[,"adj.P.Val"]<=0.005),]
day2vs4<-day2vs4[order(day2vs4[,"logFC"],decreasing=TRUE),]
write.csv(day2vs4,"results/day2vs4_D4.csv",row.names=F)

day4vs0<-topTable(ebFit, coef=4, adjust="BH", number=nrow(E))
rownames(day4vs0)<-day4vs0$ID
#day4vs0<-day4vs0[which(day4vs0[,"adj.P.Val"]<=0.005),]
day4vs0<-day4vs0[order(day4vs0[,"logFC"],decreasing=TRUE),]
write.csv(day4vs0,"results/day4vs0_D4.csv",row.names=F)


#####take top changing genes between Day 0 and Day 4 - pull out expression values for these and then cluster....

###########take genes that change somewhere along timecourse

day0vs1_sig <- day0vs1[which(day0vs1[,"adj.P.Val"] <= 0.05),]
day0vs1_sig.o <- day0vs1_sig[order(abs(day0vs1_sig[,"logFC"]),decreasing = TRUE),]
day0vs1_sig.od <- day0vs1_sig.o[!duplicated(day0vs1_sig.o[,"EnsemblID"]),c("ID","EnsemblID","logFC")]

day1vs2_sig <- day1vs2[which(day1vs2[,"adj.P.Val"] <= 0.05),]
day1vs2_sig.o <- day1vs2_sig[order(abs(day1vs2_sig[,"logFC"]),decreasing = TRUE),]
day1vs2_sig.od <- day1vs2_sig.o[!duplicated(day1vs2_sig.o[,"EnsemblID"]),c("ID","EnsemblID","logFC")]

day2vs4_sig <- day2vs4[which(day2vs4[,"adj.P.Val"] <= 0.05),]
day2vs4_sig.o <- day2vs4_sig[order(abs(day2vs4_sig[,"logFC"]),decreasing = TRUE),]
day2vs4_sig.od <- day2vs4_sig.o[!duplicated(day2vs4_sig.o[,"EnsemblID"]),c("ID","EnsemblID","logFC")]

day4vs0_sig <- day4vs0[which(day4vs0[,"adj.P.Val"] <= 0.05),]
day4vs0_sig.o <- day4vs0_sig[order(abs(day4vs0_sig[,"logFC"]),decreasing = TRUE),]
day4vs0_sig.od <- day4vs0_sig.o[!duplicated(day4vs0_sig.o[,"EnsemblID"]),c("ID","EnsemblID","logFC")]

changing_time <- rbind(day0vs1_sig.od,day1vs2_sig.od,day2vs4_sig.od,day4vs0_sig.od)

write.csv(changing_time, file = "results/genes_changing_across_timecourse_sig.csv")


##should also take genes that now have a change in expression when remove REST - ie all genes that have a change anywhere in REST null

f.res <- f.test[order(abs(f.test[,"day0vs4"]),decreasing=TRUE),]
f.res <- f.test[!duplicated(f.test[,"EnsemblID"]),]

#take genes that change > +/- 1 significantly

f.res_sig <- f.res[which(f.res[,"adj.P.Val"] <= 0.01),]
changed.genes <- f.res_sig[which(abs(f.res_sig[,"day0vs4"]) >= 1),c("ID","EnsemblID")]

write.csv(changed.genes, file = "results/genes_changing_across_timecourse.csv")

changing_time_csv <- read.csv(file = "results/genes_changing_withwithout_REST.csv")
changing_time <- changing_time_csv[,c("ID","EnsemblID")]

changing_genes <- rbind(changed.genes,changing_time)

#remove duplicates

change_gene <- changing_genes[!duplicated(changing_genes[,"EnsemblID"]),]

#reload all data and keep mutant aswell...
BSData <- get(load("results/BSData.quantile.RData"))
E <- exprs(BSData)
E <- E[,c(1:4,24:27,28:31,5:8,9:11,16:19,20:23,12:15)]

changeE <- merge(E, change_gene, by.x = "row.names", by.y = "ID")

#remove one gene that doesnt have annotation
changeE <- changeE[which(!(is.na(changeE[,"EnsemblID"]))),]

#put rownames as ensemblIDs, makes downstream stuff easier
rownames(changeE) <- changeE[,"EnsemblID"]

Exp <- changeE[,2:32]

##calculate averages

D4.0 <- c(1,2,3,4)
D4.1 <- c(5,6,7,8)
D4.2 <- c(9,10,11,12)
D4.4 <- c(13,14,15,16)
C18.0 <- c(17,18,19)
C18.1 <- c(20,21,22,23)
C18.2 <- c(24,25,26,27)
C18.4 <- c(28,29,30,31)

aves <- apply(Exp, 1, function(x){
        D4.0av <- sum(x[D4.0])/length(D4.0)
        D4.1av <- sum(x[D4.1])/length(D4.1)
        D4.2av <- sum(x[D4.2])/length(D4.2)
        D4.4av <- sum(x[D4.4])/length(D4.4)
        C18.0av <- sum(x[C18.0])/length(C18.0)
        C18.1av <- sum(x[C18.1])/length(C18.1)
        C18.2av <- sum(x[C18.2])/length(C18.2)
        C18.4av <- sum(x[C18.4])/length(C18.4) 
            return(c(D4.0av,D4.1av,D4.2av,D4.4av,C18.0av,C18.1av,C18.2av,C18.4av))
        }
)        

aves <- t(aves)

colnames(aves) <- c("D4_0","D4_1","D4_2","D4_4","C18_0","C18_1","C18_2","C18_4")

aves_D4 <- aves[,1:4]
aves_C18 <- aves[,5:8]

#compute the distance matrix first - try cosangle or euclid
gene.dist_D4 <- distancematrix(aves_D4, "euclid")
gene.dist_C18 <- distancematrix(aves_C18, "euclid")

#now run hopach. K score relates to the level pf the dendrogram at which to call the clusters
gene.hopach_D4 <- hopach(aves_D4, dmat=gene.dist_D4, d="euclid",K=1)
gene.hopach_C18 <- hopach(aves_C18, dmat=gene.dist_C18, d="euclid",K=1)

#plot distance matrix
postscript(file="results/distancematrix_D4.ps", horizontal=FALSE)
dplot(gene.dist_D4, 
	gene.hopach_D4, 
	ord = "cluster", 
	main = "ESC D4 Timecourse", 
	showclusters = TRUE)
dev.off()

D4_clusters <- gene.hopach_D4$clust$k
C18_clusters <- gene.hopach_C18$clust$k

#run Mfuzz to plot clusters
library(Mfuzz)
tmp_expr_D4 = new('ExpressionSet', exprs=aves_D4)
cl_D4 = mfuzz(tmp_expr_D4, c=6,m=3)

tmp_expr_C18 = new('ExpressionSet', exprs=aves_C18)
cl_C18 = mfuzz(tmp_expr_C18, c=C18_clusters,m=2)

######pull genes out and compare clusters see which is closest....

core_D4 <- acore(tmp_expr_D4, cl_D4, min.acore=0.5)
core_C18 <- acore(tmp_expr_C18, cl_C18, min.acore=0.1)

#link back to f.test for wt D0vs4

annotate.cluster_D4 <- function(core.num){
   this.core <- core_D4[[core.num]]

   #find rows from f.test that are in each cluster 
   dat.core <- f.test[rownames(this.core),]

   #make a dataframe to combine the cluster gene info from limma f_test results and core membership score for each cluster
   cluster <- data.frame(dat.core, this.core[,2])

   #rename membership column to membership
   colnames(cluster)[18] <- "Membership"

   #order by membership score
   cluster <- cluster[order(cluster[,"Membership"],decreasing=TRUE),]

   #save it as a csv file named by the cluster number
   write.csv(cluster, paste("results/Mfuzz/clusters_D4_",core.num,".csv",sep=""))
}


for(i in 1:length(core_D4)){
  annotate.cluster_D4(i)
}

annotate.cluster_C18 <- function(core.num){
   this.core <- core_C18[[core.num]]

   #find rows from f.test that are in each cluster 
   dat.core <- f.test[rownames(this.core),]

   #make a dataframe to combine the cluster gene info from limma f_test results and core membership score for each cluster
   cluster <- data.frame(dat.core, this.core[,2])

   #rename membership column to membership
   colnames(cluster)[18] <- "Membership"

   #order by membership score
   cluster <- cluster[order(cluster[,"Membership"],decreasing=TRUE),]

   #save it as a csv file named by the cluster number
   write.csv(cluster, paste("results/Mfuzz/clusters_C18_",core.num,".csv",sep=""))
}


for(i in 1:length(core_C18)){
  annotate.cluster_C18(i)
}


matt.plot<-function (eset, cl, mfrow = c(1, 1), colo, min.mem = 0, time.labels, new.window = TRUE, ymin=-999, ymax=-999, xlab="Time", ylab="Expression Changes")
{
    clusterindex <- cl[[3]]
    memship <- cl[[4]]
    memship[memship < min.mem] <- -1
    colorindex <- integer(dim(exprs(eset))[[1]])
    if (missing(colo)) {
        colo <- c("#FF8F00", "#FFA700", "#FFBF00", "#FFD700",
            "#FFEF00", "#F7FF00", "#DFFF00", "#C7FF00", "#AFFF00",
            "#97FF00", "#80FF00", "#68FF00", "#50FF00", "#38FF00",
            "#20FF00", "#08FF00", "#00FF10", "#00FF28", "#00FF40",
            "#00FF58", "#00FF70", "#00FF87", "#00FF9F", "#00FFB7",
            "#00FFCF", "#00FFE7", "#00FFFF", "#00E7FF", "#00CFFF",
            "#00B7FF", "#009FFF", "#0087FF", "#0070FF", "#0058FF",
            "#0040FF", "#0028FF", "#0010FF", "#0800FF", "#2000FF",
            "#3800FF", "#5000FF", "#6800FF", "#8000FF", "#9700FF",
            "#AF00FF", "#C700FF", "#DF00FF", "#F700FF", "#FF00EF",
            "#FF00D7", "#FF00BF", "#FF00A7", "#FF008F", "#FF0078",
            "#FF0060", "#FF0048", "#FF0030", "#FF0018")
    }
    colorseq <- seq(0, 1, length = length(colo))
    for (j in 1:max(clusterindex)) {
        tmp <- exprs(eset)[clusterindex == j, ]
        tmpmem <- memship[clusterindex == j, j]
        if (((j - 1)%%(mfrow[1] * mfrow[2])) == 0) {
            if (new.window)
                X11()
            par(mfrow = mfrow)
 
            if (sum(clusterindex == j) == 0) {
                if(ymin == -999){ymin <- -1}
                if(ymax == -999) {ymax <- +1}
            }
            else {
                if(ymin == -999) {ymin <- min(tmp)}
                if(ymax == -999) {ymax <- max(tmp)}
            }
            plot.default(x = NA, xlim = c(1, dim(exprs(eset))[[2]]),
                ylim = c(ymin, ymax), xlab = xlab, ylab = ylab,
                main = paste("Cluster", j), axes = FALSE)
            if (missing(time.labels)) {
                axis(1, 1:dim(exprs(eset))[[2]], c(1:dim(exprs(eset))[[2]]))
                axis(2)
            }
           else {
                axis(1, 1:dim(exprs(eset))[[2]], time.labels)
                axis(2)
            }
        }
        else {
            if (sum(clusterindex == j) == 0) {
                if(ymin == -999){ymin <- -1}
                if(ymax == -999) {ymax <- +1}
            }
            else {
                if(ymin == -999) {ymin <- min(tmp)}
                if(ymax == -999) {ymax <- max(tmp)}
            }
            plot.default(x = NA, xlim = c(1, dim(exprs(eset))[[2]]),
                ylim = c(ymin, ymax), xlab = xlab, ylab = ylab,
                main = paste("Cluster", j), axes = FALSE)
            if (missing(time.labels)) {
                axis(1, 1:dim(exprs(eset))[[2]], c(1:dim(exprs(eset))[[2]]))
                axis(2)
            }
            else {
                axis(1, 1:dim(exprs(eset))[[2]], time.labels)
                axis(2)
            }
        }
        if (!(sum(clusterindex == j) == 0)) {
            for (jj in 1:(length(colorseq) - 1)) {
                tmpcol <- (tmpmem >= colorseq[jj] & tmpmem <=
                  colorseq[jj + 1])
                if (sum(tmpcol) > 0) {
                  tmpind <- which(tmpcol)
                  for (k in 1:length(tmpind)) {
                    lines(tmp[tmpind[k], ], col = colo[jj])
                  }
                }
            }
        }
    }
}


names <- c("D4_0","D4_1","D4_2","D4_4")

##########mfuzz.plot - but draw my version called matt.plot
postscript(file="results/Mfuzz/D4_mfuzzplots.ps", 
		paper="special",
		width=14,
		height=9, 
		horizontal=FALSE)
		par(las=2)
	matt.plot(tmp_expr_D4,cl=cl_D4,
	   mfrow=c(2,5),
	   new.window = FALSE,
	   time.labels=names,
	   min.mem=0.5,
          ymin = 6,
         ymax = 14,
           xlab = ""
                )
dev.off()

postscript(file="results/Mfuzz/C18_mfuzzplots.ps", 
		paper="special",
		width=14,
		height=9, 
		horizontal=FALSE)
		par(las=2)
	matt.plot(tmp_expr_C18,cl=cl_C18,
	   mfrow=c(2,5),
	   new.window = FALSE,
	   time.labels=names,
	   min.mem=0.3,
          ymin = 6,
         ymax = 14,
           xlab = ""
                )
dev.off()


####take genes that change in WT between day 0 and 4 and see if they change when take REST out?

res <- merged[,1:32]

#link back to original f.test

changed.genes <- res[,"Row.names"]

f.test.rest <- read.csv("results/f_test.csv")

f.test.changed <- f.test.rest[which(f.test.rest[,"ID"] %in% changed.genes),]


#take genes that changed when remove REST

test <- apply(abs(f.test.changed[,10:13]),1,function(x){any(x>1)})

rest.changed <- f.test.changed[test,]

write.csv(rest.changed, file = "results/rest_changed.csv")

#get some go terms and do something pretty
ensmart<- useMart("ensembl",dataset="mmusculus_gene_ensembl")
results<- getBM(filters="ensembl_gene_id", values=rest.changed[,"EnsemblID"], attributes=c("ensembl_gene_id","go_id", "namespace_1003","name_1006"), mart=ensmart)

res_go <- merge(rest.changed,results,by.x="EnsemblID", by.y = "ensembl_gene_id")

#pull out the biological process genes

res_bp <- res_go[which(res_go[,"namespace_1003"] == "biological_process"),]

#order by GO_ID and find duplicates - draw these on graphs?

res_bp <- res_bp[order(res_bp[,"go_id"],decreasing=FALSE),]

res_bp_dups <- res_bp[duplicated(res_bp[,"go_id"]),]

#get largest GO categories

GO_count <- as.data.frame(table(res_bp_dups[,"name_1006"]))

GO_count <- GO_count[order(GO_count[,"Freq"],decreasing=TRUE),]

#go into raw expression table and pull out probes in the top ten and average

GO_top <- GO_count[1:10,"Var1"]

probes <- as.character(res_bp_dups[which(res_bp_dups[,"name_1006"] %in% GO_top),"ID"])
probe_data <- res_bp_dups[which(res_bp_dups[,"name_1006"] %in% GO_top),c("ID","go_id","name_1006"),]

#reload all data and keep mutant aswell...
BSData <- get(load("results/BSData.quantile.RData"))
E <- exprs(BSData)
E <- E[,c(1:4,24:27,28:31,5:8,9:11,16:19,20:23,12:15)]

##calculate averages

D4.0 <- c(1,2,3,4)
D4.1 <- c(5,6,7,8)
D4.2 <- c(9,10,11,12)
D4.4 <- c(13,14,15,16)
C18.0 <- c(17,18,19)
C18.1 <- c(20,21,22,23)
C18.2 <- c(24,25,26,27)
C18.4 <- c(28,29,30,31)

aves <- apply(E, 1, function(x){
        D4.0av <- sum(x[D4.0])/length(D4.0)
        D4.1av <- sum(x[D4.1])/length(D4.1)
        D4.2av <- sum(x[D4.2])/length(D4.2)
        D4.4av <- sum(x[D4.4])/length(D4.4)
        C18.0av <- sum(x[C18.0])/length(C18.0)
        C18.1av <- sum(x[C18.1])/length(C18.1)
        C18.2av <- sum(x[C18.2])/length(C18.2)
        C18.4av <- sum(x[C18.4])/length(C18.4) 
            return(c(D4.0av,D4.1av,D4.2av,D4.4av,C18.0av,C18.1av,C18.2av,C18.4av))
        }
)        

aves <- t(aves)

colnames(aves) <- c("D4_0","D4_1","D4_2","D4_4","C18_0","C18_1","C18_2","C18_4")

#find go categories

GO_aves <- aves[probes,]

GO_res <- merge(GO_aves, probe_data, by.x = "row.names",by.y = "ID")

#vertically average each gene

##################this is a silly idea and will never work as the getbm function doesnt do levels of ontology.

#GO term categories
gen_neurons <- qw(Irx3, Irx5, Efnb1, Otx2, Onecut2, Cxcl12, Meis1, Ephb1, Nrcam, Cdkn1c, Ppp1r9a, Hoxa2, Hes5, Efna5)
neuron_dev <- qw(Cdkn1c, Nrcam, Ppp1r9a, Hoxa2, Irx5, Efnb11, Onecut2, Efna5, Cxcl12, Ephb1)
organ_morph <- qw(Irx5, Fst, Otx2, Igf2, Meis1, Ephb1, Lama1, Rgma, Hoxa2, Hoxb1, Hoxb2, Pdgfra, Pitx2)
tissue_dev <- qw(Efnb1, Fst, Otx2, Onecut2, Lama1, Ednrb, Rgma, Hoxb2, Gata6, Ptn, Spp1, Pitx2, F2r)
neuron_proj <- qw(Nrcam, Pppp1r9a, Hoxa2, Efnb1, Efna5, Cxcl12, Ephb1)
reg_trans <- qw(Irx3, Irx5, Otx2, Onecut2, Meis1, Mycl1, Cdkn1c, Hoxa2, Hoxb1, Meis2, Hoxb2, Hey1, Id2, Hes5, Gata6, Foxd4, Pitx2)

#take genes from above and get probes, use to find expression values and then draw graphs

gen_neuron_res <- as.character(rest.changed[which(rest.changed[,"symbol"] %in% gen_neurons),"ID"])
neuron_dev_res <- as.character(rest.changed[which(rest.changed[,"symbol"] %in% neuron_dev),"ID"])
organ_morph_res <- as.character(rest.changed[which(rest.changed[,"symbol"] %in% organ_morph),"ID"])
tissue_dev_res <- as.character(rest.changed[which(rest.changed[,"symbol"] %in% tissue_dev),"ID"])
neuron_proj_res <- as.character(rest.changed[which(rest.changed[,"symbol"] %in% neuron_proj),"ID"])
reg_trans_res <- as.character(rest.changed[which(rest.changed[,"symbol"] %in% reg_trans),"ID"])

E.1 <- aves[gen_neuron_res,]
E.2 <- aves[neuron_dev_res,]
E.3 <- aves[organ_morph_res,]
E.4 <- aves[tissue_dev_res,]
E.5 <- aves[neuron_proj_res,]
E.6 <- aves[reg_trans_res,]

col_means1 <- colMeans(E.1)
col_means2 <- colMeans(E.2)
col_means3 <- colMeans(E.3)
col_means4 <- colMeans(E.4)
col_means5 <- colMeans(E.5)
col_means6 <- colMeans(E.6)

names <- c("Day 0", "Day 1", "Day 2", "Day 4")

col_means.df1 <- rbind(col_means1[1:4],col_means1[5:8])
col_means.df2 <- rbind(col_means2[1:4],col_means2[5:8])
col_means.df3 <- rbind(col_means3[1:4],col_means3[5:8])
col_means.df4 <- rbind(col_means4[1:4],col_means4[5:8])
col_means.df5 <- rbind(col_means5[1:4],col_means5[5:8])
col_means.df6 <- rbind(col_means6[1:4],col_means6[5:8])

postscript(file="results/GO_clustering.ps", horizontal=FALSE)
attach(mtcars)
par(mfrow=c(2,3))

plot(col_means.df1[1,], type = "l",ylab="Expression level (log2)", xlab = "Timecourse", xaxt = "n", ylim=c(6.5,10), main = "Generation of Neurons",col="blue")
axis(1, at=1:4, labels=names)
lines(col_means.df1[2,], col = "red")

plot(col_means.df2[1,], type = "l",ylab="Expression level (log2)", xlab = "Timecourse", xaxt = "n", ylim=c(6.5,10), main = "Neuronal Development",col="blue")
axis(1, at=1:4, labels=names)
lines(col_means.df2[2,], col = "red")

plot(col_means.df3[1,], type = "l",ylab="Expression level (log2)", xlab = "Timecourse", xaxt = "n", ylim=c(6.5,10), main = "Organ Morphogenesis",col="blue")
axis(1, at=1:4, labels=names)
lines(col_means.df3[2,], col = "red")

plot(col_means.df4[1,], type = "l",ylab="Expression level (log2)", xlab = "Timecourse", xaxt = "n", ylim=c(6.5,10), main = "Tissue Development",col="blue")
axis(1, at=1:4, labels=names)
lines(col_means.df4[2,], col = "red")

plot(col_means.df5[1,], type = "l",ylab="Expression level (log2)", xlab = "Timecourse", xaxt = "n", ylim=c(6.5,10), main = "Neuron Projection",col="blue")
axis(1, at=1:4, labels=names)
lines(col_means.df5[2,], col = "red")

plot(col_means.df6[1,], type = "l",ylab="Expression level (log2)", xlab = "Timecourse", xaxt = "n", ylim=c(6.5,10), main = "Regulation of Transcription",col="blue")
axis(1, at=1:4, labels=names)
lines(col_means.df6[2,], col = "red")

dev.off()










